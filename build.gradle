buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

configurations {
    shade
}

version = mod_version
group = "se.gory_moon" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "HorsePower-$mc_version"

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mcp_channel, version: mcp_mappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            // Run directory
            workingDirectory project.file('run')

            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            // Colored console
            properties 'forge.logging.noansi': 'false'

            mods {
                horsepower {
                    source sourceSets.main
                }
            }
            // Intellij stuff
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath}${File.pathSeparatorChar}${project.file("out/production/classes").canonicalPath}"
        }

        server {
            // Run directory
            workingDirectory project.file('run')

            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            // Colored console
            properties 'forge.logging.noansi': 'false'

            mods {
                horsepower {
                    source sourceSets.main
                }
            }
            // Intellij stuff
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath}${File.pathSeparatorChar}${project.file("out/production/classes").canonicalPath}"
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'horsepower', '--all', '--output', file('src/generated/resources/'),
                    '--existing', '"' + file('src/main/resources') + '"'

            mods {
                horsepower {
                    source sourceSets.main
                }
            }
            // Intellij stuff
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath}${File.pathSeparatorChar}${project.file("out/production/classes").canonicalPath}"
        }
    }
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
/*
    maven {
        url "http://maven.blamejared.com"
    }*/

    maven {
        name = "Tehnut - Hwyla"
        url "http://tehnut.info/maven"
    }

    maven {
        name = "Tterrag - TOP,Registrate"
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.14.4:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-1.14.4:${jei_version}")

    //compile fg.deobf("CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.9.486")
    compile fg.deobf(project.dependencies.create("mcjty.theoneprobe:TheOneProbe-${top_version}") {
        transitive = false
    })

    compileOnly "mcp.mobius.waila:Hwyla:${hwyla_version}:api"
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")


    def registrate = "com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate
}


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes(["Specification-Title":      "HorsePower",
                    "Specification-Vendor":     "Gory_Moon",
                    "Specification-Version":    "1", // We are version 1 of ourselves
                    "Implementation-Title":     project.name,
                    "Implementation-Version":   "${project.version}",
                    "Implementation-Vendor":    "Gory_Moon",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.horsepower.repack.registrate'
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    archiveClassifier.set('dev')
}

task sourceJar(type: Jar) {
    from(sourceSets.main.allSource) {
        include '**'
    }

    archiveClassifier.set('sources')
}

artifacts {
    archives devJar
    archives sourceJar
}

/*task signJar(type: SignJar, dependsOn: ["jar", "devJar"]) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStorePass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}*/

// Runs this task automatically when build is ran.
//build.dependsOn signJar

task("uploadJars", dependsOn: "build") {
    description = "uploads JARs"
    if (project.hasProperty("local_maven")) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://${local_maven}")
                    pom.artifactId = "HorsePower"
                    pom.version = mc_version + "-" + project.version
                }
            }
        }
    }
}