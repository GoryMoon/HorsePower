
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = mod_version
group = "se.gory_moon"
archivesBaseName = "HorsePower-$mc_version"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Make mixins work on dependencies
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                horsepower {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Make mixins work on dependencies
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                horsepower {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Make mixins work on dependencies
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'horsepower', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                horsepower {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.horsepower.repack.registrate'

    archiveClassifier = ''
}

jar.finalizedBy('signJar', 'shadowJar')
shadowJar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}


import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import net.minecraftforge.gradle.common.tasks.SignJar

task deobfJar(type: ShadowJar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output

    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.chargers.repack.registrate'
    archiveClassifier = 'deobf'
}

task forgelibJar(type: Jar) {
    description = 'Creates a compiled JAR which also contains raw sources.'
    from sourceSets.main.output
    from sourceSets.main.allJava

    archiveClassifier = 'forgelib'
}


artifacts {
    archives sourcesJar
    archives deobfJar
    archives forgelibJar
}

repositories {
    maven {
        name = "Progwml6 JEI"
        url = "https://dvs1.progwml6.com/files/maven"
    }

    maven {
        name = "ModMaven JEI"
        url = "https://modmaven.k-4u.nl"
    }

    maven {
        name = "Tehnut - Hwyla"
        url "https://maven.tehnut.info"
    }

    maven {
        name = "TTerrag - TOP,Registrate"
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    def registrate = "com.tterrag.registrate:Registrate:${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    //compile fg.deobf("CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.9.486")
    implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:TheOneProbe-${top_version}") {
        transitive = false
    })

    // Compile against the Hwyla API, but do not include it at runtime
    //compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
    // At runtime, use the full Hwyla jar
    //runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "HorsePower",
                "Specification-Vendor"    : "Gory_Moon",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Gory_Moon",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

// Jar Signing

task signJar(type: SignJar, dependsOn: shadowJar) {

    onlyIf {
        project.hasProperty('keyStore')
    }

    if (project.hasProperty('keyStore')) {
        project.logger.info('Signing jar ' + jar.archivePath.getName())

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStorePass')
        inputFile = jar.archiveFile
        outputFile = jar.archiveFile
    } else {
        project.logger.warn('Could not sign ' + jar.archivePath.getName() + '. No keyStore property could be found')
    }
}